<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Processing on Z10Z</title>
    <link>https://zubie7a.github.io/z10z/tags/processing/</link>
    <description>Recent content in Processing on Z10Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Feb 2014 02:19:23 -0500</lastBuildDate>
    <atom:link href="https://zubie7a.github.io/z10z/tags/processing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Playing With Processing</title>
      <link>https://zubie7a.github.io/z10z/2014/02/playing-with-processing/</link>
      <pubDate>Fri, 14 Feb 2014 02:19:23 -0500</pubDate>
      
      <guid>https://zubie7a.github.io/z10z/2014/02/playing-with-processing/</guid>
      <description>&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/a2qDobiht7g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is an animation I did for a Computer Graphics class homework, without using any of the built in 2D/3D cartesian transformations, but the ones taught to us at class after I garnered some experience by playing around with the framework &lt;em&gt;(but still only using the basic drawing functionality)&lt;/em&gt;. Check out at &lt;a href=&#34;https://github.com/Zubieta/Computer_Graphics&#34;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, my homeworks for that class, mostly using &lt;strong&gt;Processing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Its the language most of &lt;strong&gt;Computational Artists&lt;/strong&gt; use nowadays to make some neat stuff, like &lt;a href=&#34;https://www.tumblr.com/search/processing+gif&#34;&gt;hypnotic geometric GIFs&lt;/a&gt;, &lt;a href=&#34;https://www.tumblr.com/search/processing+glitch&#34;&gt;glitched art&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=OGoZktCzMS4&#34;&gt;interactive artistic installations&lt;/a&gt; using external hardware input, etc. See for yourself some &lt;a href=&#34;https://processing.org/exhibition/&#34;&gt;crazy stuff done with it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, I couldn’t initially resist the temptation of playing around with some images’ pixels like a lot of cool kids do nowadays, as some way of initially testing the framework capabilities or basic functionality. I tried making an &lt;strong&gt;Android&lt;/strong&gt; camera thing with filters, then it glitched terribly, then I thought of playing for now just with some old images and glitching them, but now I want to make an &lt;strong&gt;Android Glitch/Artsy Camera&lt;/strong&gt; app! Instagram better watch their backs&amp;hellip; or not.&lt;/p&gt;

&lt;p&gt;These are kind of the most noteworthy images among a bunch of not good looking mishaps &lt;em&gt;(glitch art is supposed to be about mishaps, but even among glitched images there are some artsy and some plainly awful)&lt;/em&gt;. Some of these could be done very easily with enough photoshop knowledge, but hell, its programming! Also, because I was changing code almost randomly or without a set goal &lt;em&gt;(or without knowing what would it even do)&lt;/em&gt; I have no code to recreate any of these, but it shouldn’t be that hard to recreate for anyone not so inexperienced as I kinda am now! &lt;strong&gt;All these were done with direct pixel manipulation, and the use of crazy bitwise operations, formulas based on RGB value, and loops.&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;https://i.imgur.com/uK99OCH.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/uK99OCH.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://i.imgur.com/8pGEv3u.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/8pGEv3u.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://i.imgur.com/I7UAuy9.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/I7UAuy9.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/SBoNneC.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/SBoNneC.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/1x9EkUl.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/1x9EkUl.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/WaqbgcQ.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/WaqbgcQ.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/NPCJnXH.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/NPCJnXH.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/rAP7ERq.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/rAP7ERq.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/w2R0RBx.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/w2R0RBx.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/jsJh4jm.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/jsJh4jm.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/J5NWF9I.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/J5NWF9I.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://i.imgur.com/WyQEtNq.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/WyQEtNq.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Processing&lt;/strong&gt; is awesome, it is built on top on &lt;strong&gt;Java&lt;/strong&gt; but at the same time its &lt;strong&gt;damn fast&lt;/strong&gt; &lt;em&gt;(and faster if you are using low-level stuff)&lt;/em&gt;, and allows exporting to &lt;strong&gt;Android&lt;/strong&gt; and &lt;strong&gt;Javascript&lt;/strong&gt; with no changes to the code &lt;em&gt;(if you are using nothing more than the default bindings and libraries, no platform specific stuff)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It has its &lt;strong&gt;own IDE&lt;/strong&gt;, the basic idea of is that if you are going to work with the raw &lt;strong&gt;Processing&lt;/strong&gt; language, you can export the working app to other platforms without making any changes to the code, the IDE handles that, but at the cost that you can&amp;rsquo;t use any existing library that is specific to any of those.&lt;/p&gt;

&lt;p&gt;It also makes a lot easier to manage &lt;strong&gt;input events&lt;/strong&gt; &lt;em&gt;(mouse, keyboard, external sensors/devices)&lt;/em&gt; without dealing yourself with the management of threads &lt;em&gt;(it basically seems to have a thread for managing such events, and another which continously draws the window, perfect for interactive non-blocking stuff)&lt;/em&gt;. It also has great bindings to &lt;strong&gt;graphic/geometric functions and transformations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But you can also develop in &lt;strong&gt;Eclipse&lt;/strong&gt; &lt;em&gt;(which is painful at first, having to extract the core .jar libraries from Processing and add them to your new projects manually every time)&lt;/em&gt;, but once you get the grasp of it, its awesome, because how easy it becomes to use external &lt;strong&gt;Java&lt;/strong&gt; packages, debuggers, and other tools, or manually include the &lt;strong&gt;Processing.js&lt;/strong&gt; files in a web page project and develop directly in HTML/JS with some of its bindings &lt;em&gt;(at the cost of missing cross-compatibility).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But in &lt;strong&gt;Eclipse&lt;/strong&gt; you can sacrifice such cross-compatibility for nice code completion, debugging, tons of existing libraries, and faster time to run &lt;em&gt;(its a ton faster to deploy an Android app from PC to device in Eclipse than from Processing’s IDE)&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>